/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CaseStudies } from "./CaseStudies";
import { CaseStudiesCountArgs } from "./CaseStudiesCountArgs";
import { CaseStudiesFindManyArgs } from "./CaseStudiesFindManyArgs";
import { CaseStudiesFindUniqueArgs } from "./CaseStudiesFindUniqueArgs";
import { CreateCaseStudiesArgs } from "./CreateCaseStudiesArgs";
import { UpdateCaseStudiesArgs } from "./UpdateCaseStudiesArgs";
import { DeleteCaseStudiesArgs } from "./DeleteCaseStudiesArgs";
import { Projects } from "../../projects/base/Projects";
import { CaseStudiesService } from "../caseStudies.service";
@graphql.Resolver(() => CaseStudies)
export class CaseStudiesResolverBase {
  constructor(protected readonly service: CaseStudiesService) {}

  async _caseStudiesItemsMeta(
    @graphql.Args() args: CaseStudiesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CaseStudies])
  async caseStudiesItems(
    @graphql.Args() args: CaseStudiesFindManyArgs
  ): Promise<CaseStudies[]> {
    return this.service.caseStudiesItems(args);
  }

  @graphql.Query(() => CaseStudies, { nullable: true })
  async caseStudies(
    @graphql.Args() args: CaseStudiesFindUniqueArgs
  ): Promise<CaseStudies | null> {
    const result = await this.service.caseStudies(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CaseStudies)
  async createCaseStudies(
    @graphql.Args() args: CreateCaseStudiesArgs
  ): Promise<CaseStudies> {
    return await this.service.createCaseStudies({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CaseStudies)
  async updateCaseStudies(
    @graphql.Args() args: UpdateCaseStudiesArgs
  ): Promise<CaseStudies | null> {
    try {
      return await this.service.updateCaseStudies({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CaseStudies)
  async deleteCaseStudies(
    @graphql.Args() args: DeleteCaseStudiesArgs
  ): Promise<CaseStudies | null> {
    try {
      return await this.service.deleteCaseStudies(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Projects, {
    nullable: true,
    name: "project",
  })
  async getProject(
    @graphql.Parent() parent: CaseStudies
  ): Promise<Projects | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
