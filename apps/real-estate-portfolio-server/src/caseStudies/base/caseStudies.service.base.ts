/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CaseStudies as PrismaCaseStudies,
  Projects as PrismaProjects,
} from "@prisma/client";

export class CaseStudiesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CaseStudiesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.caseStudies.count(args);
  }

  async caseStudiesItems(
    args: Prisma.CaseStudiesFindManyArgs
  ): Promise<PrismaCaseStudies[]> {
    return this.prisma.caseStudies.findMany(args);
  }
  async caseStudies(
    args: Prisma.CaseStudiesFindUniqueArgs
  ): Promise<PrismaCaseStudies | null> {
    return this.prisma.caseStudies.findUnique(args);
  }
  async createCaseStudies(
    args: Prisma.CaseStudiesCreateArgs
  ): Promise<PrismaCaseStudies> {
    return this.prisma.caseStudies.create(args);
  }
  async updateCaseStudies(
    args: Prisma.CaseStudiesUpdateArgs
  ): Promise<PrismaCaseStudies> {
    return this.prisma.caseStudies.update(args);
  }
  async deleteCaseStudies(
    args: Prisma.CaseStudiesDeleteArgs
  ): Promise<PrismaCaseStudies> {
    return this.prisma.caseStudies.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProjects | null> {
    return this.prisma.caseStudies
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
