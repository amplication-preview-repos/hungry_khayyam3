/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CaseStudiesService } from "../caseStudies.service";
import { CaseStudiesCreateInput } from "./CaseStudiesCreateInput";
import { CaseStudies } from "./CaseStudies";
import { CaseStudiesFindManyArgs } from "./CaseStudiesFindManyArgs";
import { CaseStudiesWhereUniqueInput } from "./CaseStudiesWhereUniqueInput";
import { CaseStudiesUpdateInput } from "./CaseStudiesUpdateInput";

export class CaseStudiesControllerBase {
  constructor(protected readonly service: CaseStudiesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CaseStudies })
  async createCaseStudies(
    @common.Body() data: CaseStudiesCreateInput
  ): Promise<CaseStudies> {
    return await this.service.createCaseStudies({
      data: {
        ...data,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        challenges: true,
        createdAt: true,
        id: true,
        outcomes: true,

        project: {
          select: {
            id: true,
          },
        },

        solutions: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CaseStudies] })
  @ApiNestedQuery(CaseStudiesFindManyArgs)
  async caseStudiesItems(
    @common.Req() request: Request
  ): Promise<CaseStudies[]> {
    const args = plainToClass(CaseStudiesFindManyArgs, request.query);
    return this.service.caseStudiesItems({
      ...args,
      select: {
        challenges: true,
        createdAt: true,
        id: true,
        outcomes: true,

        project: {
          select: {
            id: true,
          },
        },

        solutions: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CaseStudies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async caseStudies(
    @common.Param() params: CaseStudiesWhereUniqueInput
  ): Promise<CaseStudies | null> {
    const result = await this.service.caseStudies({
      where: params,
      select: {
        challenges: true,
        createdAt: true,
        id: true,
        outcomes: true,

        project: {
          select: {
            id: true,
          },
        },

        solutions: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CaseStudies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCaseStudies(
    @common.Param() params: CaseStudiesWhereUniqueInput,
    @common.Body() data: CaseStudiesUpdateInput
  ): Promise<CaseStudies | null> {
    try {
      return await this.service.updateCaseStudies({
        where: params,
        data: {
          ...data,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          challenges: true,
          createdAt: true,
          id: true,
          outcomes: true,

          project: {
            select: {
              id: true,
            },
          },

          solutions: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CaseStudies })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCaseStudies(
    @common.Param() params: CaseStudiesWhereUniqueInput
  ): Promise<CaseStudies | null> {
    try {
      return await this.service.deleteCaseStudies({
        where: params,
        select: {
          challenges: true,
          createdAt: true,
          id: true,
          outcomes: true,

          project: {
            select: {
              id: true,
            },
          },

          solutions: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
