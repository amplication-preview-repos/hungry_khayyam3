/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServicesService } from "../services.service";
import { ServicesCreateInput } from "./ServicesCreateInput";
import { Services } from "./Services";
import { ServicesFindManyArgs } from "./ServicesFindManyArgs";
import { ServicesWhereUniqueInput } from "./ServicesWhereUniqueInput";
import { ServicesUpdateInput } from "./ServicesUpdateInput";

export class ServicesControllerBase {
  constructor(protected readonly service: ServicesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Services })
  async createServices(
    @common.Body() data: ServicesCreateInput
  ): Promise<Services> {
    return await this.service.createServices({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        serviceName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Services] })
  @ApiNestedQuery(ServicesFindManyArgs)
  async servicesItems(@common.Req() request: Request): Promise<Services[]> {
    const args = plainToClass(ServicesFindManyArgs, request.query);
    return this.service.servicesItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        serviceName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Services })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async services(
    @common.Param() params: ServicesWhereUniqueInput
  ): Promise<Services | null> {
    const result = await this.service.services({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        serviceName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Services })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServices(
    @common.Param() params: ServicesWhereUniqueInput,
    @common.Body() data: ServicesUpdateInput
  ): Promise<Services | null> {
    try {
      return await this.service.updateServices({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          serviceName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Services })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServices(
    @common.Param() params: ServicesWhereUniqueInput
  ): Promise<Services | null> {
    try {
      return await this.service.deleteServices({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          serviceName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
