/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TestimonialsService } from "../testimonials.service";
import { TestimonialsCreateInput } from "./TestimonialsCreateInput";
import { Testimonials } from "./Testimonials";
import { TestimonialsFindManyArgs } from "./TestimonialsFindManyArgs";
import { TestimonialsWhereUniqueInput } from "./TestimonialsWhereUniqueInput";
import { TestimonialsUpdateInput } from "./TestimonialsUpdateInput";

export class TestimonialsControllerBase {
  constructor(protected readonly service: TestimonialsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Testimonials })
  async createTestimonials(
    @common.Body() data: TestimonialsCreateInput
  ): Promise<Testimonials> {
    return await this.service.createTestimonials({
      data: data,
      select: {
        clientName: true,
        createdAt: true,
        id: true,
        testimonialText: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Testimonials] })
  @ApiNestedQuery(TestimonialsFindManyArgs)
  async testimonialsItems(
    @common.Req() request: Request
  ): Promise<Testimonials[]> {
    const args = plainToClass(TestimonialsFindManyArgs, request.query);
    return this.service.testimonialsItems({
      ...args,
      select: {
        clientName: true,
        createdAt: true,
        id: true,
        testimonialText: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Testimonials })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async testimonials(
    @common.Param() params: TestimonialsWhereUniqueInput
  ): Promise<Testimonials | null> {
    const result = await this.service.testimonials({
      where: params,
      select: {
        clientName: true,
        createdAt: true,
        id: true,
        testimonialText: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Testimonials })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTestimonials(
    @common.Param() params: TestimonialsWhereUniqueInput,
    @common.Body() data: TestimonialsUpdateInput
  ): Promise<Testimonials | null> {
    try {
      return await this.service.updateTestimonials({
        where: params,
        data: data,
        select: {
          clientName: true,
          createdAt: true,
          id: true,
          testimonialText: true,
          updatedAt: true,
          videoUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Testimonials })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTestimonials(
    @common.Param() params: TestimonialsWhereUniqueInput
  ): Promise<Testimonials | null> {
    try {
      return await this.service.deleteTestimonials({
        where: params,
        select: {
          clientName: true,
          createdAt: true,
          id: true,
          testimonialText: true,
          updatedAt: true,
          videoUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
