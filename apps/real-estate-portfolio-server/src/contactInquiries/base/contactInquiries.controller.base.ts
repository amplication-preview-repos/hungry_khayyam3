/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContactInquiriesService } from "../contactInquiries.service";
import { ContactInquiriesCreateInput } from "./ContactInquiriesCreateInput";
import { ContactInquiries } from "./ContactInquiries";
import { ContactInquiriesFindManyArgs } from "./ContactInquiriesFindManyArgs";
import { ContactInquiriesWhereUniqueInput } from "./ContactInquiriesWhereUniqueInput";
import { ContactInquiriesUpdateInput } from "./ContactInquiriesUpdateInput";

export class ContactInquiriesControllerBase {
  constructor(protected readonly service: ContactInquiriesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContactInquiries })
  async createContactInquiries(
    @common.Body() data: ContactInquiriesCreateInput
  ): Promise<ContactInquiries> {
    return await this.service.createContactInquiries({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContactInquiries] })
  @ApiNestedQuery(ContactInquiriesFindManyArgs)
  async contactInquiriesItems(
    @common.Req() request: Request
  ): Promise<ContactInquiries[]> {
    const args = plainToClass(ContactInquiriesFindManyArgs, request.query);
    return this.service.contactInquiriesItems({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContactInquiries })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contactInquiries(
    @common.Param() params: ContactInquiriesWhereUniqueInput
  ): Promise<ContactInquiries | null> {
    const result = await this.service.contactInquiries({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        message: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContactInquiries })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContactInquiries(
    @common.Param() params: ContactInquiriesWhereUniqueInput,
    @common.Body() data: ContactInquiriesUpdateInput
  ): Promise<ContactInquiries | null> {
    try {
      return await this.service.updateContactInquiries({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          message: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContactInquiries })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContactInquiries(
    @common.Param() params: ContactInquiriesWhereUniqueInput
  ): Promise<ContactInquiries | null> {
    try {
      return await this.service.deleteContactInquiries({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          message: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
