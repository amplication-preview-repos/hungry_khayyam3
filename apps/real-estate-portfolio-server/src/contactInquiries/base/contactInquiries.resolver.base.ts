/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContactInquiries } from "./ContactInquiries";
import { ContactInquiriesCountArgs } from "./ContactInquiriesCountArgs";
import { ContactInquiriesFindManyArgs } from "./ContactInquiriesFindManyArgs";
import { ContactInquiriesFindUniqueArgs } from "./ContactInquiriesFindUniqueArgs";
import { CreateContactInquiriesArgs } from "./CreateContactInquiriesArgs";
import { UpdateContactInquiriesArgs } from "./UpdateContactInquiriesArgs";
import { DeleteContactInquiriesArgs } from "./DeleteContactInquiriesArgs";
import { ContactInquiriesService } from "../contactInquiries.service";
@graphql.Resolver(() => ContactInquiries)
export class ContactInquiriesResolverBase {
  constructor(protected readonly service: ContactInquiriesService) {}

  async _contactInquiriesItemsMeta(
    @graphql.Args() args: ContactInquiriesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContactInquiries])
  async contactInquiriesItems(
    @graphql.Args() args: ContactInquiriesFindManyArgs
  ): Promise<ContactInquiries[]> {
    return this.service.contactInquiriesItems(args);
  }

  @graphql.Query(() => ContactInquiries, { nullable: true })
  async contactInquiries(
    @graphql.Args() args: ContactInquiriesFindUniqueArgs
  ): Promise<ContactInquiries | null> {
    const result = await this.service.contactInquiries(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContactInquiries)
  async createContactInquiries(
    @graphql.Args() args: CreateContactInquiriesArgs
  ): Promise<ContactInquiries> {
    return await this.service.createContactInquiries({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContactInquiries)
  async updateContactInquiries(
    @graphql.Args() args: UpdateContactInquiriesArgs
  ): Promise<ContactInquiries | null> {
    try {
      return await this.service.updateContactInquiries({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactInquiries)
  async deleteContactInquiries(
    @graphql.Args() args: DeleteContactInquiriesArgs
  ): Promise<ContactInquiries | null> {
    try {
      return await this.service.deleteContactInquiries(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
