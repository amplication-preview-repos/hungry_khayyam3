/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BlogPostsService } from "../blogPosts.service";
import { BlogPostsCreateInput } from "./BlogPostsCreateInput";
import { BlogPosts } from "./BlogPosts";
import { BlogPostsFindManyArgs } from "./BlogPostsFindManyArgs";
import { BlogPostsWhereUniqueInput } from "./BlogPostsWhereUniqueInput";
import { BlogPostsUpdateInput } from "./BlogPostsUpdateInput";

export class BlogPostsControllerBase {
  constructor(protected readonly service: BlogPostsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BlogPosts })
  async createBlogPosts(
    @common.Body() data: BlogPostsCreateInput
  ): Promise<BlogPosts> {
    return await this.service.createBlogPosts({
      data: data,
      select: {
        author: true,
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BlogPosts] })
  @ApiNestedQuery(BlogPostsFindManyArgs)
  async blogPostsItems(@common.Req() request: Request): Promise<BlogPosts[]> {
    const args = plainToClass(BlogPostsFindManyArgs, request.query);
    return this.service.blogPostsItems({
      ...args,
      select: {
        author: true,
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BlogPosts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async blogPosts(
    @common.Param() params: BlogPostsWhereUniqueInput
  ): Promise<BlogPosts | null> {
    const result = await this.service.blogPosts({
      where: params,
      select: {
        author: true,
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BlogPosts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBlogPosts(
    @common.Param() params: BlogPostsWhereUniqueInput,
    @common.Body() data: BlogPostsUpdateInput
  ): Promise<BlogPosts | null> {
    try {
      return await this.service.updateBlogPosts({
        where: params,
        data: data,
        select: {
          author: true,
          content: true,
          createdAt: true,
          id: true,
          publishedDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BlogPosts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBlogPosts(
    @common.Param() params: BlogPostsWhereUniqueInput
  ): Promise<BlogPosts | null> {
    try {
      return await this.service.deleteBlogPosts({
        where: params,
        select: {
          author: true,
          content: true,
          createdAt: true,
          id: true,
          publishedDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
