/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BlogPosts as PrismaBlogPosts } from "@prisma/client";

export class BlogPostsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BlogPostsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.blogPosts.count(args);
  }

  async blogPostsItems(
    args: Prisma.BlogPostsFindManyArgs
  ): Promise<PrismaBlogPosts[]> {
    return this.prisma.blogPosts.findMany(args);
  }
  async blogPosts(
    args: Prisma.BlogPostsFindUniqueArgs
  ): Promise<PrismaBlogPosts | null> {
    return this.prisma.blogPosts.findUnique(args);
  }
  async createBlogPosts(
    args: Prisma.BlogPostsCreateArgs
  ): Promise<PrismaBlogPosts> {
    return this.prisma.blogPosts.create(args);
  }
  async updateBlogPosts(
    args: Prisma.BlogPostsUpdateArgs
  ): Promise<PrismaBlogPosts> {
    return this.prisma.blogPosts.update(args);
  }
  async deleteBlogPosts(
    args: Prisma.BlogPostsDeleteArgs
  ): Promise<PrismaBlogPosts> {
    return this.prisma.blogPosts.delete(args);
  }
}
